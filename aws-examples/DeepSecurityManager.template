{
  "AWSTemplateFormatVersion" : "2010-09-09",
   "Description" : "(0011) - This template deploys Trend Micro Deep Security into a VPC with a Multi-AZ Microsoft SQLSERVER RDS instance and an instance that will montior the EC2 and Deep Security APIs to ensure all instances in the VPC are protected.  **WARNING** This template uses images from the AWS Marketplace and an active subscription to either the hourly or BYOL Deep Security listings is required - Please see the Quick Start documentation for more details.  This template creates Amazon EC2 instances and related resources. You will be billed for the AWS resources used if you create a stack from this template.  ",
  "Parameters" : {
    "VPCCIDR" : {
      "Type" : "String",
      "Description" : "Enter the CIDR range to be used for the VPC",
      "Default"     : "10.0.0.0/16",
      "AllowedPattern" : "[0-9]+\\..+"
    },
   "VPCID" : {
      "Type"        : "AWS::EC2::VPC::Id",
      "Description" : "Enter the VPC-ID the Deep Security Manager will be deployed into"
    }, 
   "DSMLicenseType" : {
     "Description" : "Deep Security Manager is available from the AWS Marketplace as a Bring Your Own License or hourly in 25, 50, 100 or 200 agent licenses.  Enter the number of agents to license or BYOL",
     "Type" : "String",
     "AllowedValues" : ["25","50","100","200", "BYOL"]  
   }, 
   "AllowSSH" : {
      "Type"        : "AWS::EC2::SecurityGroup::Id",
      "Description" : "Enter the existing security group ID that new instances should allow SSH from",
      "ConstraintDescription" : "Must be a Security Group ID"
     
    },
    "AllowHTTPS" : {
      "Type" : "String",
      "Description" : "Enter the CIDR range that the Deep Secuirty Manager will accept HTTPS requests from on its external interface",
      "AllowedPattern" : "[0-9]+\\..+",
      "ConstraintDescription" : "Must be a CIDR range"
     
    }, 
    "IRAZ1CIDR" : {
      "Type" : "String",
      "Description" : "Enter the CIDR range for the first incident responce subnet"
    },  
    "IRAZ2CIDR" : {
      "Type" : "String",
      "Description" : "Enter the CIDR range for the second incident responce subnet"
    },
    "PrivateSubnet1" : {
	  "Type"        : "AWS::EC2::Subnet::Id",
      "Description" : "Enter the subnet ID of the first private subnet"
    },    
    "PublicSubnet1" : {
	  "Type"        : "AWS::EC2::Subnet::Id",
      "Description" : "Enter the subnet ID of the first private subnet"
    },    
    "PublicSubnet2" : {
	  "Type"        : "AWS::EC2::Subnet::Id",
      "Description" : "Enter the subnet ID of the first private subnet"
    },     
    "PrivateSubnet2" : {
	  "Type"        : "AWS::EC2::Subnet::Id",
      "Description" : "Enter the subnet ID of the second private subnet"
    },
    "RDSInstanceType" : {
      "Default" : "db.m3.large",
      "Description" : "MSSQL RDS Instance Size",
      "Type" : "String",
      "AllowedValues" : [ "db.m3.large","db.m3.xlarge","db.m3.2xlarge" ],
      "ConstraintDescription" : "RDS Insance Type must be db.m3.large, db.m3.xlarge or db.m3.2xlarge"
    },    
    "DSMAdminUser" : {
      "Type" : "String",
      "Default" : "admin", 
      "MinLength": "4",
      "MaxLength": "10",
      "Description" : "Username for the admin user of the Deep Security Manager", 
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*"
    },
    "DSMAdminPass" : {
      "Type" : "String",
      "NoEcho" : "True",
      "MinLength": "8", 
      "Description" : "Password for the admin user of the Deep Security Manager", 
      "AllowedPattern" : "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*"
      
    },
    "RDSMasterUser" : {
      "Type" : "String",
      "Default" : "master", 
      "MinLength": "4",
      "MaxLength": "10",
      "Description" : "Master username for the RDS MSSQL database", 
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*"
    },
    "RDSMasterPass" : {
      "Type" : "String",
      "Description" : "Password used for the master user in the RDS MSSQL database", 
      "NoEcho" : "True"       
    },
    "RequireAV" : {
      "Type" : "String",
      "AllowedValues" : [ "Y", "N" ],
      "Default" : "Y", 
      "Description" : "Require instances to have the Deep Security AV module enbled",
      "ConstraintDescription" : "Input must be either Y or N"
    },
    "RequireDPI" : {
      "Type" : "String",
      "AllowedValues" : [ "Y", "N" ],
      "Default" : "Y", 
      "Description" : "Require instances to have the Deep Security Deep Packet Inspection module enbled",
      "ConstraintDescription" : "Input must be either Y or N"
    },
    "RequireDPIProtect" : {
      "Type" : "String",
      "AllowedValues" : [ "Y", "N" ],
      "Default" : "Y", 
      "Description" : "Require instances to have the Deep Security Deep Packet Inspection module in Protect mode rather than detect",
      "ConstraintDescription" : "Input must be either Y or N"
    },
    "RequireFW" : {
      "Type" : "String",
      "AllowedValues" : [ "Y", "N" ],
      "Default" : "Y", 
      "Description" : "Require instances to have the Deep Security Firewall module enbled",
      "ConstraintDescription" : "Input must be either Y or N"
    },
    "RequireFIM" : {
      "Type" : "String",
      "AllowedValues" : [ "Y", "N" ],
      "Default" : "Y", 
      "Description" : "Require instances to have the Deep Security File Integrity Monitoring module enbled",
      "ConstraintDescription" : "Input must be either Y or N"
    },
    "RequireLog" : {
      "Type" : "String",
      "AllowedValues" : [ "Y", "N" ],
      "Default" : "Y", 
      "Description" : "Require instances to have the Deep Security Log Inspection module enbled",
      "ConstraintDescription" : "Input must be either Y or N"
    },
    "EnforceMode" : {
      "Type" : "String",
      "AllowedValues" : [ "Y", "N" ],
      "Default" : "N", 
      "Description" : "Determines if enforcement is enabled, when set to yes instances out of complaince will be isolated into an incident responce subnet",
      "ConstraintDescription" : "Input must be either Y or N"
    },
   "EnableRedediation" : {
      "Type" : "String",
      "AllowedValues" : [ "Y", "N" ],
      "Default" : "N", 
      "Description" : "If enabled the isolation security group will be modified to allow inbound traffic on TCP/4118 from the DSM and outbound traffic on TCP/443, TCP/4119-4120 and TCP/4122 to the DSM on non-IR interfaces",
      "ConstraintDescription" : "Input must be either Y or N"
    }, 
    "ExemptTag" : {
      "Type" : "String",
      "Description" : "Instances with this tag will be excempt from enformcent if they are out of complaince",
      "Default" : "CriticalAsset"     
    },
    "ExemptTagValue" : {
      "Type" : "String",
      "Description" : "The value an instance must have in the Exempt Tag to be exempt from enforment.",
      "Default" : "True"     
    },
    "NotificationEmail" : {
      "Type" : "String",
       "Description" : "Enter the email address to be notified when instances are found to be out of policy",
      "AllowedPattern" : "[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?"
    }, 
    "KeyPair" : {
      "Type"        : "AWS::EC2::KeyPair::KeyName",
      "Description" : "Key pair to use for instances to allow ssh access"
          
    }
   },
    "Conditions" : {
      "UseBYOL" : {"Fn::Equals" : [{"Ref" : "DSMLicenseType"}, "BYOL"]},
      "Users25" : {"Fn::Equals" : [{"Ref" : "DSMLicenseType"}, "25"]},
      "Users50" : {"Fn::Equals" : [{"Ref" : "DSMLicenseType"}, "50"]},
      "Users100" : {"Fn::Equals" : [{"Ref" : "DSMLicenseType"}, "100"]},
      "Users200" : {"Fn::Equals" : [{"Ref" : "DSMLicenseType"}, "200"]},
      "EnableEnforcement" : { "Fn::Equals" : [{"Ref" : "EnforceMode" }, "Y"]},
      "AllowRemediation" :  { "Fn::Equals" : [{"Ref" : "EnableRedediation" }, "Y"]}
      
  },
   "Mappings": 
    {
      "AWSLINUXAMI" : 
      {
        "us-east-1" : {"AMI" : "ami-1ecae776" },
        "us-west-1" : {"AMI" : "ami-d114f295" },
        "us-west-2" : {"AMI" : "ami-e7527ed7" },
        "eu-west-1" : {"AMI" : "ami-a10897d6" },
        "eu-central-1" : {"AMI" : "ami-a8221fb5" },
        "ap-southeast-1" : {"AMI" : "ami-68d8e93a" },
        "ap-northeast-1" : {"AMI" : "ami-cbf90ecb" },
        "ap-southeast-2" : {"AMI" : "ami-fd9cecc7" },
        "sa-east-1" : {"AMI" : "ami-b52890a8" }     
      },
      "DSMAMI" : 
      {
        "us-east-1" : {"BYOL" : "ami-7fc4ba1a", "25" : "ami-69c4ba0c", "50" : "ami-69c4ba0c", "100" : "ami-69c4ba0c", "200" : "ami-69c4ba0c"  },
        "us-west-1" : {"BYOL" : "ami-25834461", "25" : "ami-3983447d", "50" : "ami-3983447d", "100" : "ami-3983447d", "200" : "ami-3983447d"  },
        "us-west-2" : {"BYOL" : "ami-df2e36ef", "25" : "ami-272f3717", "50" : "ami-272f3717", "100" : "ami-272f3717", "200" : "ami-272f3717"  },
        "eu-west-1" : {"BYOL" : "ami-f1a58c86", "25" : "ami-45a48d32", "50" : "ami-45a48d32", "100" : "ami-45a48d32", "200" : "ami-45a48d32"  },
        "eu-central-1" : {"BYOL" : "ami-e28d8eff", "25" : "ami-0c8c8f11", "50" : "ami-0c8c8f11", "100" : "ami-0c8c8f11", "200" : "ami-0c8c8f11"  },
        "ap-southeast-1" : {"BYOL" : "ami-447d6a16", "25" : "ami-507d6a02", "50" : "ami-507d6a02", "100" : "ami-507d6a02", "200" : "ami-507d6a02"  },
        "ap-northeast-1" : {"BYOL" : "ami-0cd4490c", "25" : "ami-fcd548fc", "50" : "ami-fcd548fc", "100" : "ami-fcd548fc", "200" : "ami-fcd548fc"  },
        "ap-southeast-2" : {"BYOL" : "ami-052d643f", "25" : "ami-072d643d", "50" : "ami-072d643d", "100" : "ami-072d643d", "200" : "ami-072d643d"  },
        "sa-east-1" : {"BYOL" : "ami-9f168282", "25" : "ami-9116828c", "50" : "ami-9116828c", "100" : "ami-9116828c", "200" : "ami-9116828c"  }  
      },
      "DSMSIZE" :
      {
        "BYOL" : {"TYPE" : "c3.2xlarge"},
        "25" : {"TYPE": "m3.large"  },
        "50" : {"TYPE": "m3.xlarge"  },
        "100" : {"TYPE": "m3.2xlarge"  },
        "200" : {"TYPE": "c3.4xlarge"  }
      }
   },  
 "Resources" : {
      
   "DSM" : {       
     "Type" : "AWS::EC2::Instance",
     "Properties" : {        
       "ImageId" : {"Fn::If" : ["UseBYOL",  {"Fn::FindInMap" : [ "DSMAMI", { "Ref" : "AWS::Region"}, "BYOL" ]}, {"Fn::FindInMap" : [ "DSMAMI", { "Ref" : "AWS::Region"}, "25" ]}]},          
       "InstanceType" : {"Fn::FindInMap" : [ "DSMSIZE", {"Ref" : "DSMLicenseType" } , "TYPE" ]},
    
                
       "Tags"         : [{"Key" : "Name","Value" : "DSM"},{"Key" : "Application","Value" : {"Ref" : "AWS::StackName"} }, {"Key" : "CriticalAsset","Value" : "True"}],       
       "NetworkInterfaces" :  [ { "NetworkInterfaceId" : {"Ref" : "DSMInterface"}, "DeviceIndex" : "0" },{ "NetworkInterfaceId" : {"Ref" : "DSMExternalInterface"}, "DeviceIndex" : "1" } ],      
         "KeyName"           : {"Ref" : "KeyPair" },
         "UserData" : {
           "Fn::Base64" : { "Fn::Join" : [ "",[
             "#!/bin/bash -v\n", 
             "wget -O /root/createDSMDB.py https://s3.amazonaws.com/quickstart-reference/trendmicro/deepsecurity/latest/scripts/createDSMDB.py\n",
             "chmod 700 /root/createDSMDB.py\n",
             "/root/createDSMDB.py --endpoint ",{"Fn::GetAtt": ["MSSQLRDS", "Endpoint.Address"  ]}," --user ", {"Ref" : "RDSMasterUser"}," --pass ", {"Ref" : "RDSMasterPass" },"  \n",
             "echo \"AddressAndPortsScreen.ManagerPort=443\" > /root/dsmprops\n",
             "echo \"UpgradeVerificationScreen.Overwrite=True\" >> /root/dsmprops\n",
             "echo \"RelayScreen.ProxyPort=None\" >> /root/dsmprops\n",
             "echo \"DatabaseScreen.Transport=TCP\" >> /root/dsmprops\n",
             "echo \"RelayScreen.Proxy=False\" >> /root/dsmprops\n",
             "echo \"DatabaseScreen.DatabaseType=Microsoft SQL Server\" >> /root/dsmprops\n",
             "echo \"DatabaseScreen.Password=", {"Ref" : "RDSMasterPass"}, "\" >> /root/dsmprops\n",
             "echo \"DatabaseScreen.DatabaseName=DSM\" >> /root/dsmprops\n",
             "echo \"CredentialsScreen.Administrator.Username=", {"Ref" : "DSMAdminUser" },"\" >> /root/dsmprops\n",
             "echo \"RelayScreen.ProxyType=None\" >> /root/dsmprops\n",
             "echo \"AddressAndPortsScreen.HeartbeatPort=4120\" >> /root/dsmprops\n",
             "echo \"CredentialsScreen.UseStrongPasswords=False\" >> /root/dsmprops\n",
             "echo \"DatabaseScreen.Hostname=", {"Fn::GetAtt": ["MSSQLRDS", "Endpoint.Address"  ]  }, "\" >> /root/dsmprops\n",
             "echo \"CredentialsScreen.Administrator.Password=", {"Ref" : "DSMAdminPass" },"\"  >> /root/dsmprops\n",
             "echo \"RelayScreen.AntiMalware=True\" >> /root/dsmprops\n",
             "echo \"AddressAndPortsScreen.NewNode=False\" >> /root/dsmprops\n",
             "echo \"RelayScreen.ProxyAuthentication=False\" >> /root/dsmprops\n",
             "echo \"RelayScreen.Install=True\" >> /root/dsmprops\n",
             "echo \"AddressAndPortsScreen.ManagerAddress=", {"Fn::GetAtt" : ["DSMInterface","PrimaryPrivateIpAddress"]},"\"  >> /root/dsmprops\n",
             "echo \"SecurityUpdateScreen.UpdateComponents=True\" >> /root/dsmprops\n",
             "echo \"DatabaseScreen.Username=", {"Ref" : "RDSMasterUser"},"\"  >> /root/dsmprops\n",
             "echo \"DatabaseScreen.SQLServer.InstanceType=default\" >> /root/dsmprops\n",
             "echo \"DatabaseScreen.SQLServer.UseDefaultCollation=False\" >> /root/dsmprops\n",
             "/opt/trend/packages/dsm/default/Manager-AWS-9.5.6300.x64.sh -q -console -varfile /root/dsmprops > dsm.log 2>&1\n",
             "sleep 60\n",
             "/opt/dsm/dsm_c -action changesetting -name \"settings.configuration.webserviceAPIEnabled\" -value \"true\"\n",
             "curl -X PUT -H 'Content-Type:' --data-binary '{\"Status\" : \"SUCCESS\",",
                                                           "\"Reason\" : \"The Deep Security Manager has been installed and started\",",
                                                           "\"UniqueId\" : \"DSM\",",
                                                           "\"Data\" : \"Done\"}' ",
                  "\"", {"Ref" : "WaitForDSMInstallWaitHandle"},"\"\n"
             
             
             
             ]]}
           }           
         }
  },
        
  "DSMCloudAccountUser" : {     
    "Type" : "AWS::IAM::User",      
    "Properties" : {
      "Policies": [{
        "PolicyName": "DSMDescribePermissions",
        "PolicyDocument" : {
          "Statement": [
            {
              "Effect"   : "Allow",
              "Action"   : ["ec2:DescribeImages", "ec2:DescribeInstances","ec2:DescribeTags"], 
              "Resource" : "*"
              }
              ]
		}
		}]
	}
	},
          

 "DSMCloudAccountUserKeys" : {          
   "Type" : "AWS::IAM::AccessKey",
   "Properties" : { "UserName" : { "Ref": "DSMCloudAccountUser" }}
	},  
 "DSMInterface" :     
  {      
    "Type" : "AWS::EC2::NetworkInterface",       
    "Properties" : {    
      "SubnetId" : { "Ref" : "PrivateSubnet1" },      
      "Description" :"Primary Interface for the DSM",      
      "GroupSet" : [ {"Ref" : "DSMSecurityGroup"} ],
            "SourceDestCheck" : "true",        
            "Tags" : [{"Key" : "Name","Value" : "DSM Interface"},{"Key" : "Application","Value" : {"Ref" : "AWS::StackName"} }, {"Key" : "Network","Value" : "Private"}]       
		}
	},
   
 "DSMExternalInterface" :     
  {      
    "Type" : "AWS::EC2::NetworkInterface",       
    "Properties" : {    
      "SubnetId" : { "Ref" : "PublicSubnet1" },     
      "Description" :"External Interface for the DSM",      
      "GroupSet" : [ {"Ref" : "DSMSecurityGroupExternal"} ],
            "SourceDestCheck" : "true",        
            "Tags" : [{"Key" : "Name","Value" : "DSM External Interface for Administration"},{"Key" : "Application","Value" : {"Ref" : "AWS::StackName"} }, {"Key" : "Network","Value" : "Public"}]       
		}
	},
 "DSMEIP" : {
   "Type" : "AWS::EC2::EIP",
   "Properties" : {
     "Domain" : "vpc"
   }  
 }, 
 "DSMEIPAssoc" : {
   "Type": "AWS::EC2::EIPAssociation",
   "Properties": {
     "AllocationId" : { "Fn::GetAtt" : ["DSMEIP" , "AllocationId" ]},
     "NetworkInterfaceId" : { "Ref" : "DSMExternalInterface" }
   }
 }, 
 "SNSNotificationTopic" : {
    "Type" : "AWS::SNS::Topic",
    "Properties" : {
      "DisplayName" : "SNS Topic for notifications from the DSM Watcher instance",  
      "Subscription" : [ {
            "Endpoint" : {"Ref" : "NotificationEmail"},
            "Protocol" : "email"
        } ]
    }
  },

 "DSMWatcherASLCEnforceMode" : {
   "Type" : "AWS::AutoScaling::LaunchConfiguration",
   "DependsOn" : "WaitForDSMInstall", 
    "Properties" : {
      
      "IamInstanceProfile" :  {"Ref" : "DSMWatcherRoleProfile"}, 
      "InstanceType" : "m3.medium",    
      "ImageId" : {"Fn::FindInMap" : [ "AWSLINUXAMI", {"Ref" : "AWS::Region"}, "AMI" ]},   
      "KeyName" : {"Ref" :  "KeyPair" },        
      "SecurityGroups" :  [ {"Ref" : "DSMWatcherSecurityGroup"}],    
      "UserData" : {        
       "Fn::Base64" : { "Fn::Join" : [ "",[
         "#!/bin/bash -v\n",               
         "yum update -y aws* \n",               
         "yum install -y python-boto*\n", 
         "yum install -y java-1.8*\n",             
         "wget -O /root/createCloudAccount.py https://s3.amazonaws.com/quickstart-reference/trendmicro/deepsecurity/latest/scripts/createCloudAccount.py\n",
         "chmod u+x /root/createCloudAccount.py \n",
         "/root/createCloudAccount.py --akey \"",{"Ref" : "DSMCloudAccountUserKeys" }, "\" --region \"", {"Ref" : "AWS::Region"}, "\" --skey \"", {"Fn::GetAtt" : ["DSMCloudAccountUserKeys", "SecretAccessKey" ]}, "\" --dsmuser \"",{"Ref" : "DSMAdminUser"},"\" --dsmpass \"", {"Ref" : "DSMAdminPass" }, "\" --dsmip \"", {"Fn::GetAtt" : ["DSMInterface","PrimaryPrivateIpAddress"]},"\" \n",
         "echo \"DSMURL=https://",{"Fn::GetAtt" : ["DSMInterface","PrimaryPrivateIpAddress"]},":443\" > /root/.dsmwatcher.props\n",
         "echo \"DSMIP=",{"Fn::GetAtt" : ["DSMInterface","PrimaryPrivateIpAddress"]},"\" >> /root/.dsmwatcher.props\n",
         "echo \"DSMUSER=",{"Ref" : "DSMAdminUser"},"\" >> /root/.dsmwatcher.props\n",
         "echo \"DSMPASS=",{"Ref" : "DSMAdminPass"},"\" >> /root/.dsmwatcher.props\n",
         "echo \"EXEMPTTAG=",{"Ref" : "ExemptTag"},"\" >> /root/.dsmwatcher.props\n",
         "echo \"EXEMPTTAGVALUE=",{"Ref" : "ExemptTagValue"},"\" >> /root/.dsmwatcher.props\n",
         "echo \"REQFW=",{"Ref" : "RequireFW"},"\" >> /root/.dsmwatcher.props\n",
         "echo \"REQDPI=",{"Ref" : "RequireDPI"},"\" >> /root/.dsmwatcher.props\n",
         "echo \"DPIPROTECT=",{"Ref" : "RequireDPIProtect"},"\" >> /root/.dsmwatcher.props\n",
         "echo \"REQFIM=",{"Ref" : "RequireFIM"},"\" >> /root/.dsmwatcher.props\n",
         "echo \"REQAV=",{"Ref" : "RequireAV"},"\" >> /root/.dsmwatcher.props\n",
         "echo \"REQLOG=",{"Ref" : "RequireLog"},"\" >> /root/.dsmwatcher.props\n",
         "echo \"ENFORCE=Y\" >> /root/.dsmwatcher.props\n",
         "echo \"IRSG=", {"Fn::GetAtt": ["IncidentResponceSecurityGroup", "GroupId"]},"\" >> /root/.dsmwatcher.props\n",
         "echo \"DENYALLSG=",{"Fn::GetAtt": ["DENYALLSecurityGroup", "GroupId"]},"\" >> /root/.dsmwatcher.props\n",
         "echo \"IRSUBNETS=",{"Ref" : "IRSubnet1"},",",{"Ref" : "IRSubnet2"},"\" >> /root/.dsmwatcher.props\n",
         "echo \"SNSTOPIC=",{"Ref" : "SNSNotificationTopic"},"\" >> /root/.dsmwatcher.props\n",
         "wget -O /root/Watcher.jar https://s3.amazonaws.com/quickstart-reference/trendmicro/deepsecurity/latest/scripts/Watcher.jar\n",
         "echo -n | openssl s_client -connect ",{"Fn::GetAtt" : ["DSMInterface","PrimaryPrivateIpAddress"]} ,":443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /root/dsm.cert\n",
         "echo -n | openssl s_client -connect ec2.",{"Ref" : "AWS::Region"},".amazonaws.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /root/ec2.cert\n",
         "echo -n | openssl s_client -connect autoscaling.",{"Ref" : "AWS::Region"},".amazonaws.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /root/as.cert\n",
         "echo -n | openssl s_client -connect sns.",{"Ref" : "AWS::Region"},".amazonaws.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /root/sns.cert\n",
         "printf \"password\npassword\nyes\n\" | keytool -importcert -trustcacerts -keystore /root/dsm.jks -file /root/dsm.cert\n",
         "printf \"password\nyes\n\" | keytool -importcert -trustcacerts -alias ec2 -keystore /root/dsm.jks -file /root/ec2.cert\n",
         "printf \"password\nyes\n\" | keytool -importcert -trustcacerts -alias as -keystore /root/dsm.jks -file /root/as.cert\n",
         "printf \"password\nyes\n\" | keytool -importcert -trustcacerts -alias sns -keystore /root/dsm.jks -file /root/sns.cert\n",
         "cd /root\n",
         "wget https://s3.amazonaws.com/quickstart-reference/trendmicro/deepsecurity/latest/scripts/Watcher.zip\n",
         "wget -O /etc/init.d/dsmwatcher https://s3.amazonaws.com/quickstart-reference/trendmicro/deepsecurity/latest/scripts/dsmwatcher\n",
         "chmod 755 /etc/init.d/dsmwatcher\n",
         "chkconfig --add /etc/init.d/dsmwatcher\n",
         "service dsmwatcher start\n"          
          ]]
          }
        }   
      }
      
   },
  "DSMWatcherASLCMonitorMode" : {
   "Type" : "AWS::AutoScaling::LaunchConfiguration",
   "DependsOn" : "WaitForDSMInstall", 
    "Properties" : {
      
      "IamInstanceProfile" :  {"Ref" : "DSMWatcherRoleProfile"}, 
      "InstanceType" : "m3.medium",    
      "ImageId" : {"Fn::FindInMap" : [ "AWSLINUXAMI", {"Ref" : "AWS::Region"}, "AMI" ]},   
      "KeyName" : {"Ref" :  "KeyPair" },        
      "SecurityGroups" :  [ {"Ref" : "DSMWatcherSecurityGroup"}],    
      "UserData" : {        
       "Fn::Base64" : { "Fn::Join" : [ "",[
         "#!/bin/bash -v\n",               
         "yum update -y aws* \n",               
         "yum install -y python-boto*\n", 
         "yum install -y java-1.8*\n",             
         "wget -O /root/createCloudAccount.py https://s3.amazonaws.com/quickstart-reference/trendmicro/deepsecurity/latest/scripts/createCloudAccount.py\n",
         "chmod u+x /root/createCloudAccount.py \n",
         "/root/createCloudAccount.py --akey \"",{"Ref" : "DSMCloudAccountUserKeys" }, "\" --region \"", {"Ref" : "AWS::Region"}, "\" --skey \"", {"Fn::GetAtt" : ["DSMCloudAccountUserKeys", "SecretAccessKey" ]}, "\" --dsmuser \"",{"Ref" : "DSMAdminUser"},"\" --dsmpass \"", {"Ref" : "DSMAdminPass" }, "\" --dsmip \"", {"Fn::GetAtt" : ["DSMInterface","PrimaryPrivateIpAddress"]},"\" \n",
         "echo \"DSMURL=https://",{"Fn::GetAtt" : ["DSMInterface","PrimaryPrivateIpAddress"]},":443\" > /root/.dsmwatcher.props\n",
         "echo \"DSMIP=",{"Fn::GetAtt" : ["DSMInterface","PrimaryPrivateIpAddress"]},"\" >> /root/.dsmwatcher.props\n",
         "echo \"DSMUSER=",{"Ref" : "DSMAdminUser"},"\" >> /root/.dsmwatcher.props\n",
         "echo \"DSMPASS=",{"Ref" : "DSMAdminPass"},"\" >> /root/.dsmwatcher.props\n",
         "echo \"EXEMPTTAG=",{"Ref" : "ExemptTag"},"\" >> /root/.dsmwatcher.props\n",
         "echo \"EXEMPTTAGVALUE=",{"Ref" : "ExemptTagValue"},"\" >> /root/.dsmwatcher.props\n",
         "echo \"REQFW=",{"Ref" : "RequireFW"},"\" >> /root/.dsmwatcher.props\n",
         "echo \"REQDPI=",{"Ref" : "RequireDPI"},"\" >> /root/.dsmwatcher.props\n",
         "echo \"DPIPROTECT=",{"Ref" : "RequireDPIProtect"},"\" >> /root/.dsmwatcher.props\n",
         "echo \"REQFIM=",{"Ref" : "RequireFIM"},"\" >> /root/.dsmwatcher.props\n",
         "echo \"REQAV=",{"Ref" : "RequireAV"},"\" >> /root/.dsmwatcher.props\n",
         "echo \"REQLOG=",{"Ref" : "RequireLog"},"\" >> /root/.dsmwatcher.props\n",
         "echo \"ENFORCE=N\" >> /root/.dsmwatcher.props\n",
         "echo \"IRSG=", {"Fn::GetAtt": ["IncidentResponceSecurityGroup", "GroupId"]},"\" >> /root/.dsmwatcher.props\n",
         "echo \"DENYALLSG=",{"Fn::GetAtt": ["DENYALLSecurityGroup", "GroupId"]},"\" >> /root/.dsmwatcher.props\n",
         "echo \"IRSUBNETS=",{"Ref" : "IRSubnet1"},",",{"Ref" : "IRSubnet2"},"\" >> /root/.dsmwatcher.props\n",
         "echo \"SNSTOPIC=",{"Ref" : "SNSNotificationTopic"},"\" >> /root/.dsmwatcher.props\n",
         "wget -O /root/Watcher.jar https://s3.amazonaws.com/quickstart-reference/trendmicro/deepsecurity/latest/scripts/Watcher.jar\n",
         "echo -n | openssl s_client -connect ",{"Fn::GetAtt" : ["DSMInterface","PrimaryPrivateIpAddress"]} ,":443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /root/dsm.cert\n",
         "echo -n | openssl s_client -connect ec2.",{"Ref" : "AWS::Region"},".amazonaws.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /root/ec2.cert\n",
         "echo -n | openssl s_client -connect autoscaling.",{"Ref" : "AWS::Region"},".amazonaws.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /root/as.cert\n",
         "echo -n | openssl s_client -connect sns.",{"Ref" : "AWS::Region"},".amazonaws.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /root/sns.cert\n",
         "printf \"password\npassword\nyes\n\" | keytool -importcert -trustcacerts -keystore /root/dsm.jks -file /root/dsm.cert\n",
         "printf \"password\nyes\n\" | keytool -importcert -trustcacerts -alias ec2 -keystore /root/dsm.jks -file /root/ec2.cert\n",
         "printf \"password\nyes\n\" | keytool -importcert -trustcacerts -alias as -keystore /root/dsm.jks -file /root/as.cert\n",
         "printf \"password\nyes\n\" | keytool -importcert -trustcacerts -alias sns -keystore /root/dsm.jks -file /root/sns.cert\n",
         "cd /root\n",
         "wget https://s3.amazonaws.com/quickstart-reference/trendmicro/deepsecurity/latest/scripts/Watcher.zip\n",
         "wget -O /etc/init.d/dsmwatcher https://s3.amazonaws.com/quickstart-reference/trendmicro/deepsecurity/latest/scripts/dsmwatcher\n",
         "chmod 755 /etc/init.d/dsmwatcher\n",
         "chkconfig --add /etc/init.d/dsmwatcher\n",
         "service dsmwatcher start\n"       
          ]]
          }
        }   
      }
      
   },
 "DSMWatcherASG" : {
   "Type" : "AWS::AutoScaling::AutoScalingGroup",
   "Properties" : {
     "DesiredCapacity" : "1",
     "LaunchConfigurationName" : {"Fn::If" : ["EnableEnforcement", {"Ref" : "DSMWatcherASLCEnforceMode"}, {"Ref" : "DSMWatcherASLCMonitorMode"}]}, 
     "MaxSize" : "1",
     "MinSize" : "1",
     "Tags" :   [{"Key" : "Name","Value" : "DSMWatcher", "PropagateAtLaunch" : "true"},{"Key" : "Application","Value" : {"Ref" : "AWS::StackName"}, "PropagateAtLaunch" : "true" }, {"Key" : "CriticalAsset","Value" : "True", "PropagateAtLaunch" : "true"}],
     "VPCZoneIdentifier" : [ {"Ref" :  "PrivateSubnet1" },{"Ref" :  "PrivateSubnet2" }         ]
    
     
     }
     
 },      
 
      
 "DSMWatcherSecurityGroup" : {
   "Type" : "AWS::EC2::SecurityGroup",
   "Properties" : {
      "GroupDescription" : "Security Group for the DSM Watcher instance - No ingress traffic allowed",
      "VpcId" : {"Ref" : "VPCID"}
     }
	},     
   "IRSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {       
        "VpcId" : {"Ref" : "VPCID"},
        "CidrBlock" : {"Ref" : "IRAZ1CIDR"},
        "AvailabilityZone" : {"Fn::Select" : [0,{"Fn::GetAZs" : ""}]},
        "Tags" : [{"Key" : "Name","Value" : "Incident Responce Subnet 1"},{"Key" : "Application","Value" : {"Ref" : "AWS::StackName"}},{"Key" : "Network","Value" : "Isolation"}]
        }
   },   
   "IRSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {       
        "VpcId" : {"Ref" : "VPCID"},
        "CidrBlock" : {"Ref" : "IRAZ2CIDR"},
        "AvailabilityZone" : {"Fn::Select" : [1,{"Fn::GetAZs" : ""}]},
        "Tags" : [{"Key" : "Name","Value" : "Incident Responce Subnet 1"},{"Key" : "Application","Value" : {"Ref" : "AWS::StackName"}},{"Key" : "Network","Value" : "Isolation"}]
        }
   },
   "IRNACLIR1" : {
     "Type" : "AWS::EC2::NetworkAcl",
     "Properties" : {
        "Tags" : [ {"Key" : "Network" , "Value": "Isolation" }, {"Key" : "Application","Value" : {"Ref" : "AWS::StackName"}}],
        "VpcId" : {"Ref" : "VPCID" }
     }
   },  
   "IRNACLEntryAllowIR1Egress" : {
     "Type" : "AWS::EC2::NetworkAclEntry",
     "Properties" : {
        "CidrBlock" : {"Ref" : "IRAZ1CIDR" }, 
         "Egress" : "true",
         "NetworkAclId" : {"Ref" : "IRNACLIR1"}, 
         "Protocol" : "-1",
         "RuleAction" : "allow",
         "RuleNumber" : "1"
         
     }
   }, 
    "IRNACLEntryAllowIR1Ingress" : {
     "Type" : "AWS::EC2::NetworkAclEntry",
     "Properties" : {
        "CidrBlock" : {"Ref" : "IRAZ1CIDR" }, 
         "Egress" : "false",
         "NetworkAclId" : {"Ref" : "IRNACLIR1"}, 
         "Protocol" : "-1",
         "RuleAction" : "allow",
         "RuleNumber" : "1"
         
     }
   },   
    "IRNACLEntryDenyIR1Egress" : {
     "Type" : "AWS::EC2::NetworkAclEntry",
     "Properties" : {
        "CidrBlock" : "0.0.0.0/0", 
         "Egress" : "true",
         "NetworkAclId" : {"Ref" : "IRNACLIR1"}, 
         "Protocol" : "-1",
         "RuleAction" : "deny",
         "RuleNumber" : "2"
         
     }
   }, 
    "IRNACLEntryDenyIR1Ingress" : {
     "Type" : "AWS::EC2::NetworkAclEntry",
     "Properties" : {
        "CidrBlock" : "0.0.0.0/0", 
         "Egress" : "false",
         "NetworkAclId" : {"Ref" : "IRNACLIR1"}, 
         "Protocol" : "-1",
         "RuleAction" : "deny",
         "RuleNumber" : "2"
         
     }
   },     
      
   "IRNACLIR2" : {
     "Type" : "AWS::EC2::NetworkAcl",
     "Properties" : {
        "Tags" : [ {"Key" : "Network" , "Value": "Isolation" }, {"Key" : "Application","Value" : {"Ref" : "AWS::StackName"}}],
        "VpcId" : {"Ref" : "VPCID" }
     }
   },  
   "IRNACLEntryAllowIR2Egress" : {
     "Type" : "AWS::EC2::NetworkAclEntry",
     "Properties" : {
        "CidrBlock" : {"Ref" : "IRAZ2CIDR" }, 
         "Egress" : "true",
         "NetworkAclId" : {"Ref" : "IRNACLIR2"}, 
         "Protocol" : "-1",
         "RuleAction" : "allow",
         "RuleNumber" : "1"
         
     }
   }, 
    "IRNACLEntryAllowIR2Ingress" : {
     "Type" : "AWS::EC2::NetworkAclEntry",
     "Properties" : {
        "CidrBlock" : {"Ref" : "IRAZ2CIDR" }, 
         "Egress" : "false",
         "NetworkAclId" : {"Ref" : "IRNACLIR2"}, 
         "Protocol" : "-1",
         "RuleAction" : "allow",
         "RuleNumber" : "1"
         
     }
   },
      
   "IRNACLEntryAllowIR1Egress" : {
     "Type" : "AWS::EC2::NetworkAclEntry",
     "Properties" : {
        "CidrBlock" : {"Ref" : "IRAZ1CIDR" }, 
         "Egress" : "true",
         "NetworkAclId" : {"Ref" : "IRNACLIR1"}, 
         "Protocol" : "-1",
         "RuleAction" : "allow",
         "RuleNumber" : "1"
         
     }
   },    
     
   "IRNACLEntryAllowIR1Ingress" : {
     "Type" : "AWS::EC2::NetworkAclEntry",
     "Properties" : {
        "CidrBlock" : {"Ref" : "IRAZ1CIDR" }, 
         "Egress" : "false",
         "NetworkAclId" : {"Ref" : "IRNACLIR1"}, 
         "Protocol" : "-1",
         "RuleAction" : "allow",
         "RuleNumber" : "1"
         
     }
   },     
    "IRNACLEntryDenyIR2Egress" : {
     "Type" : "AWS::EC2::NetworkAclEntry",
     "Properties" : {
        "CidrBlock" : "0.0.0.0/0", 
         "Egress" : "true",
         "NetworkAclId" : {"Ref" : "IRNACLIR2"}, 
         "Protocol" : "-1",
         "RuleAction" : "deny",
         "RuleNumber" : "2"
         
     }
   }, 
    "IRNACLEntryDenyIR2Ingress" : {
     "Type" : "AWS::EC2::NetworkAclEntry",
     "Properties" : {
        "CidrBlock" : "0.0.0.0/0", 
         "Egress" : "false",
         "NetworkAclId" : {"Ref" : "IRNACLIR2"}, 
         "Protocol" : "-1",
         "RuleAction" : "deny",
         "RuleNumber" : "2"
         
     }
   },  
   "IRNACLAssocSubnet1" : {
     "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
     "Properties" : {
       "SubnetId" : { "Ref" : "IRSubnet1" },
       "NetworkAclId" : {"Ref" : "IRNACLIR1" }
     }
   }, 
     "IRNACLAssocSubnet2" : {
     "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
     "Properties" : {
       "SubnetId" : { "Ref" : "IRSubnet2" },
       "NetworkAclId" : {"Ref" : "IRNACLIR2" }
     }
   }, 
   "IncidentResponceSecurityGroup" : {
     "Type" : "AWS::EC2::SecurityGroup",
     "Properties" : {      
       "GroupDescription" : "Security Group for Isolated Instances - Allows traffic only from an IR Host and no outbound traffic",
       "VpcId" : {"Ref" : "VPCID"},
       "SecurityGroupIngress" : [{   
         "IpProtocol" : "tcp",
         "FromPort" : "0",
		 "ToPort" : "65535",
   		 "SourceSecurityGroupId" : {"Fn::GetAtt": ["IRHostSecurityGroup", "GroupId"]}
         }] ,
      "SecurityGroupEgress" : [{
       "IpProtocol" : "icmp", 
       "FromPort" : "0", 
       "ToPort" : "0",
       "DestinationSecurityGroupId" : {"Fn::GetAtt": ["IRHostSecurityGroup", "GroupId"]}
       }]       
   	}
	},
   "DENYALLSecurityGroup" : {
     "Type" : "AWS::EC2::SecurityGroup",
     "Properties" : {      
       "GroupDescription" : "Security Group for Isolated Instances - Applied to all existing ENIs to isolate a non-compliant instance",
       "VpcId" : {"Ref" : "VPCID"},
     "SecurityGroupIngress" : [] ,
     "SecurityGroupEgress" : [{
       "IpProtocol" : "icmp", 
       "FromPort" : "0", 
       "ToPort" : "0",
       "DestinationSecurityGroupId" : {"Fn::GetAtt": ["IRHostSecurityGroup", "GroupId"]}
       }]  
   	}
	},
  "DSMSecurityGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
   	"Properties" : {      
      "GroupDescription" : "Security Group for the Deep Security Manager",
      "VpcId" : {"Ref" : "VPCID"},
      "SecurityGroupIngress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : "4119",
            "ToPort" : "4120",
            "CidrIp"     : {"Ref" : "VPCCIDR" }
         },
         {
            "IpProtocol" : "tcp",
            "FromPort" : "4122",
            "ToPort" : "4122",
            "CidrIp"     : {"Ref" : "VPCCIDR" }
         },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "CidrIp"     : {"Ref" : "VPCCIDR" }
         },
         {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "SourceSecurityGroupId"      :  {"Ref": "AllowSSH"}
         }
         ] 
     
   	}
	},
  "DSMSecurityGroupExternal" : {
    "Type" : "AWS::EC2::SecurityGroup",
   	"Properties" : {      
      "GroupDescription" : "Security Group for the Deep Security Manager - External Interface",
      "VpcId" : {"Ref" : "VPCID"},
      "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "CidrIp"     : "0.0.0.0/0"
         }
         ]    
   	}
	},
   
 "DSASecurityGroup" : {
   "Type" : "AWS::EC2::SecurityGroup",
   "Properties" : {
      "GroupDescription" : "Security Group for the Deep Security Agent",
      "VpcId" : {"Ref" : "VPCID"},
      "SecurityGroupIngress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : "4118",
            "ToPort" : "4118",
            "SourceSecurityGroupId" : {"Fn::GetAtt": ["DSMSecurityGroup", "GroupId"]}
         }] 
   	}
	},
   "RDSSecurityGroup" : {
   "Type" : "AWS::EC2::SecurityGroup",
   "Properties" : {
      "GroupDescription" : "Security Group for RDS Instance",
      "VpcId" : {"Ref" : "VPCID"},
      "SecurityGroupIngress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : "1433",
            "ToPort" : "1433",
            "SourceSecurityGroupId" : {"Fn::GetAtt": ["DSMSecurityGroup", "GroupId"]}
         }] 
   	}
    },
  "IRHostSecurityGroup" : {
   "Type" : "AWS::EC2::SecurityGroup",
   "Properties" : {
      "GroupDescription" : "Security Group for Incident Responce instances that will be able to access isolated isntances via a secondary ENI",
      "VpcId" : {"Ref" : "VPCID"}
      
      
     }
	},
  "IRHostPrimaryNICSecurityGroup" : {
   "Type" : "AWS::EC2::SecurityGroup",
   "Properties" : {
      "GroupDescription" : "Security Group for IR Hosts primary NIC - Allows inbound SSH and restricts all outbound on this interface.  IR activity will route out the IR ENI",
      "VpcId" : {"Ref" : "VPCID"},
      "SecurityGroupIngress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "SourceSecurityGroupId" : {"Ref" : "AllowSSH"}   
         }],
     "SecurityGroupEgress" : [{
       "IpProtocol" : "icmp", 
       "FromPort" : "0", 
       "ToPort" : "0",
       "DestinationSecurityGroupId" : {"Fn::GetAtt": ["IRHostSecurityGroup", "GroupId"]}
       }]       
     }
	},
 "IRHostEgressRule": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties":{
        "IpProtocol": "tcp",
        "FromPort": "0",
        "ToPort": "65535",
        "DestinationSecurityGroupId": { "Fn::GetAtt": [ "IncidentResponceSecurityGroup","GroupId"] },
        "GroupId": {"Fn::GetAtt": ["IRHostSecurityGroup","GroupId"]}
      }
    },
    
  "RemediationEgressRule1": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Condition" : "AllowRemediation",
      "Properties":{
        "IpProtocol": "tcp",
        "FromPort": "4119",
        "ToPort": "4120",
        "DestinationSecurityGroupId": { "Fn::GetAtt": [ "DSMSecurityGroup","GroupId"] },
        "GroupId": {"Fn::GetAtt": ["DENYALLSecurityGroup","GroupId"]}
      }
    },
   "RemediationEgressRule2": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Condition" : "AllowRemediation",
      "Properties":{
        "IpProtocol": "tcp",
        "FromPort": "4122",
        "ToPort": "4122",
        "DestinationSecurityGroupId": { "Fn::GetAtt": [ "DSMSecurityGroup","GroupId"] },
        "GroupId": {"Fn::GetAtt": ["DENYALLSecurityGroup","GroupId"]}
      }
    },   
   "RemediationEgressRule3": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Condition" : "AllowRemediation",
      "Properties":{
        "IpProtocol": "tcp",
        "FromPort": "443",
        "ToPort": "443",
        "DestinationSecurityGroupId": { "Fn::GetAtt": [ "DSMSecurityGroup","GroupId"] },
        "GroupId": {"Fn::GetAtt": ["DENYALLSecurityGroup","GroupId"]}
      }
    },     
    "RemediationIngressRule": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition" : "AllowRemediation",
      "Properties":{
        "IpProtocol": "tcp",
        "FromPort": "4118",
        "ToPort": "4118",
        "SourceSecurityGroupId": { "Fn::GetAtt": [ "DSMSecurityGroup","GroupId"] },
        "GroupId": {"Fn::GetAtt": ["DENYALLSecurityGroup","GroupId"]}
      }
    },      
 "IRHost" : {       
     "Type" : "AWS::EC2::Instance",       
     "Properties" : {        
       "ImageId" : {"Fn::FindInMap" : [ "AWSLINUXAMI", {"Ref" : "AWS::Region"}, "AMI" ]},         
       "InstanceType" : "t2.micro",          
       "Tags"         : [{"Key" : "Name","Value" : "IRHost"},{"Key" : "Application","Value" : {"Ref" : "AWS::StackName"} },  {"Key" : {"Ref" : "ExemptTag" } ,"Value" :  {"Ref" : "ExemptTagValue" } }],        
       "NetworkInterfaces" : [{
         "GroupSet" : [{"Ref" : "IRHostPrimaryNICSecurityGroup"} ],               
         "DeviceIndex"              : "0",
         "DeleteOnTermination"      : "true",
         "SubnetId"                 : {"Ref" : "PublicSubnet1"}               
         },
         
         {
         "GroupSet" : [{"Ref" : "IRHostSecurityGroup"} ],               
         "DeviceIndex"              : "1",
         "DeleteOnTermination"      : "true",
         "SubnetId"                 : {"Ref" : "IRSubnet1"}               
         }
         ],       
         "KeyName"           : {"Ref" : "KeyPair" }
        
         }
  },
  "IRHost2" : {       
     "Type" : "AWS::EC2::Instance",       
     "Properties" : {        
       "ImageId" : {"Fn::FindInMap" : [ "AWSLINUXAMI", {"Ref" : "AWS::Region"}, "AMI" ]},         
       "InstanceType" : "t2.micro",          
       "Tags"         : [{"Key" : "Name","Value" : "IRHost"},{"Key" : "Application","Value" : {"Ref" : "AWS::StackName"} },  {"Key" : {"Ref" : "ExemptTag" } ,"Value" :  {"Ref" : "ExemptTagValue" } }],        
       "NetworkInterfaces" : [{
         "GroupSet" : [{"Ref" : "IRHostPrimaryNICSecurityGroup"} ],               
         "DeviceIndex"              : "0",
         "DeleteOnTermination"      : "true",
         "SubnetId"                 : {"Ref" : "PublicSubnet2"}               
         },
         
         {
         "GroupSet" : [{"Ref" : "IRHostSecurityGroup"} ],               
         "DeviceIndex"              : "1",
         "DeleteOnTermination"      : "true",
         "SubnetId"                 : {"Ref" : "IRSubnet2"}               
         }
         ],       
         "KeyName"           : {"Ref" : "KeyPair" }
        
         }
  },                    
 "MSSQLRDSSunetGroup" : {   
   "Type" : "AWS::RDS::DBSubnetGroup",
   "Properties" : {
      "DBSubnetGroupDescription" : "Subnet group for the MSSQL RDS instance used by the Deep Security Manager",
      "SubnetIds" : [{"Ref" : "PrivateSubnet1"},{"Ref" : "PrivateSubnet2"}],
      "Tags"  : [{"Key" : "Application","Value" : {"Ref" : "AWS::StackName"}}]
	}     
   },
   
    
  "CreateInfrastrcutureRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Statement" : [ {
            "Effect" : "Allow",
            "Principal" : {
              "Service" : [ "ec2.amazonaws.com" ]
            },
            "Action" : [ "sts:AssumeRole" ]
          } ]
        },
        "Path" : "/",
        "Policies" : [ {
          "PolicyName" : "CreateInfrastrcutureRole",
          "PolicyDocument" : {
            "Statement" : [ {
              "Effect" : "Allow",
              "Action" : [ "rds:CreateOptionGroup", "rds:ModifyOptionGroup", "ec2:TerminateInstances" ],
              "Resource" : "*"
            } ]
          }
        } ]
      }
    },
    "SetupRoleProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [ {
          "Ref" : "CreateInfrastrcutureRole"
        } ]
      }
    },
  "DSMWatcherRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Statement" : [ {
            "Effect" : "Allow",
            "Principal" : {
              "Service" : [ "ec2.amazonaws.com" ]
            },
            "Action" : [ "sts:AssumeRole" ]
          } ]
        },
        "Path" : "/",
        "Policies" : [ {
          "PolicyName" : "DSMWatcherRole",
          "PolicyDocument" : {
            "Statement" : [ {
              "Effect" : "Allow",
              "Action": [
        		"ec2:AttachNetworkInterface",
		        "ec2:CreateNetworkInterface",
        		"ec2:CreateTags",
		        "ec2:DeleteNetworkInterface",
		        "ec2:DeleteTags",
        		"ec2:DescribeAvailabilityZones",
		        "ec2:DescribeInstanceAttribute",
		        "ec2:DescribeInstanceStatus",
        		"ec2:DescribeInstances",
		        "ec2:DescribeNetworkInterfaceAttribute",
        		"ec2:DescribeNetworkInterfaces",
		        "ec2:DescribeRegions",
		        "ec2:DescribeSecurityGroups",
        		"ec2:DescribeTags",
		        "ec2:DetachNetworkInterface",
        		"ec2:ModifyNetworkInterfaceAttribute",
          		"ec2:DescribeSubnets",
        		"ec2:ResetNetworkInterfaceAttribute",
          		"autoscaling:DescribeAutoScalingInstances",
                "autoscaling:DetachInstances",
                "sns:Publish"
 		     	],
              "Resource" : "*"
            } ]
          }
        } ]
      }
    },
    "DSMWatcherRoleProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [ {
          "Ref" : "DSMWatcherRole"
        } ]
      }
    },
    "CreateOptionGroupInstance" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "KeyName" :  {"Ref" :  "KeyPair" },
        "SubnetId" : {"Ref" :  "PrivateSubnet1" },
        "ImageId" : {"Fn::FindInMap" : [ "AWSLINUXAMI", {"Ref" : "AWS::Region"}, "AMI" ]},
        "IamInstanceProfile" : {"Ref" : "SetupRoleProfile"},
        "InstanceType" : "m3.medium",
        "UserData" : {
        "Fn::Base64" : { "Fn::Join" : [ "",["#!/bin/bash -v\n", 
              "yum update -y aws* \n", 
              "yum install -y python-boto*\n",
              "export INSTANCE_ID=$(curl 169.254.169.254/latest/meta-data/instance-id/)\n",
              "wget -O /root/createOptionGroup.py https://s3.amazonaws.com/quickstart-reference/trendmicro/deepsecurity/latest/scripts/createOptionGroup.py\n",
              "chmod u+x /root/createOptionGroup.py \n",
              "/root/createOptionGroup.py --waitsig \"",{"Ref" : "WaitForOptionGroupWaitHandle" }, "\" --region \"", {"Ref" : "AWS::Region"}, "\" --instance $INSTANCE_ID --name \"dsm-",{"Ref" : "AWS::StackName"},"\" \n"       
          ]]
          }
        }   
      }
    },
    "ModifyOptionGroupInstance" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "MSSQLRDS",
      "Properties" : {
        "KeyName" : {"Ref" :  "KeyPair" },
        "SubnetId" : {"Ref" :  "PrivateSubnet1" },
        "ImageId" : {"Fn::FindInMap" : [ "AWSLINUXAMI", {"Ref" : "AWS::Region"}, "AMI" ]},
        "IamInstanceProfile" : {"Ref" : "SetupRoleProfile"},
        "InstanceType" : "m3.medium",
        "UserData" : {
        "Fn::Base64" : { "Fn::Join" : [ "",["#!/bin/bash -v\n", 
              "yum update -y aws* \n", 
              "yum install -y python-boto*\n",
              "export INSTANCE_ID=$(curl 169.254.169.254/latest/meta-data/instance-id/)\n",
              "wget -O /root/modifyOptionGroup.py https://s3.amazonaws.com/quickstart-reference/trendmicro/deepsecurity/latest/scripts/modifyOptionGroup.py\n",
              "chmod u+x /root/modifyOptionGroup.py \n",
              "/root/modifyOptionGroup.py --waitsig \"",{"Ref" : "WaitForOptionGroupModifyWaitHandle" }, "\" --region \"", {"Ref" : "AWS::Region"}, "\" --instance $INSTANCE_ID --name \"dsm-",{"Ref" : "AWS::StackName"},"\" \n"       
          ]]
          }
        }   
      }
    },    
    "WaitForOptionGroup" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "CreateOptionGroupInstance",
      "Properties" : {
        "Handle" : {
          "Ref" : "WaitForOptionGroupWaitHandle"
        },
        "Timeout" : "180"
      }
    },
    "WaitForOptionGroupWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Properties" : {
      }
    },
    "WaitForOptionGroupModify" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "ModifyOptionGroupInstance",
      "Properties" : {
        "Handle" : {
          "Ref" : "WaitForOptionGroupModifyWaitHandle"
        },
        "Timeout" : "180"
      }
    },
    "WaitForOptionGroupModifyWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Properties" : {
      }
    },
    
    "WaitForDSMInstall" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "DSM",
      "Properties" : {
        "Handle" : {
          "Ref" : "WaitForDSMInstallWaitHandle"
        },
        "Timeout" : "1800"
      }
    },
    "WaitForDSMInstallWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Properties" : {
      }
    },
   "MSSQLRDS" : {
     "Type" : "AWS::RDS::DBInstance",
     "DependsOn" : "WaitForOptionGroup",
     "Properties" :
     {
       "AllocatedStorage" :"200",
       "BackupRetentionPeriod" : "10",
       "DBInstanceClass" : {"Ref" : "RDSInstanceType" },
       "DBInstanceIdentifier" : "DSMDBSQLSVR",
       "DBSubnetGroupName" : {"Ref" : "MSSQLRDSSunetGroup"  },
       "Engine" : "sqlserver-se",
       "MasterUsername" : {"Ref" : "RDSMasterUser" },
       "MasterUserPassword" : {"Ref" : "RDSMasterPass"  },
       "OptionGroupName" : {"Fn::Join" : ["",[ "dsm-", {"Ref" : "AWS::StackName"}]] },
       "LicenseModel" : "license-included",
       "PubliclyAccessible" : "False",
       "StorageType" : "gp2",
       "Tags" : [{"Key" : "Application","Value" : {"Ref" : "AWS::StackName"}}],
       "VPCSecurityGroups" : [{"Ref" : "RDSSecurityGroup"} ]    
     }
	}

 },
 "Outputs" : {
   "DSMURL": {"Description" : "URL to the Deep Security Manager", "Value": { "Fn::Join" : [ "",["https://",{"Ref" : "DSMEIP" }]]}},
   "IRHOSTAZ1" : {"Description" : "Incident Responce host for AZ1", "Value" : { "Fn::GetAtt" : ["IRHost", "PrivateIp"]  }  },
   "IRHOSTAZ2" : {"Description" : "Incident Responce host for AZ2", "Value" : { "Fn::GetAtt" : ["IRHost2", "PrivateIp"]  }  }
   }
    
 }